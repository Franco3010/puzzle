{"version":3,"sources":["touchScale.ts","index.ts"],"names":["stage","createStage","canvas","getCanvas","viewport","createViewport","gl","getContext","inputHandler","createViewportAwareInputHandler","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","randomIndexArr","sort","Math","random","squareChoose","a","squareChooseAssigend","startSwap","squareInfo","value","coorX","coorY","i","length","loadTexture","bgImg","mainImgs","lineDoc","lineNgang","regions","TextureRegion","splitTexture","clearColor","createGameLoop","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","draw","emptyIndex","findIndex","x","canSwapSquare","filter","square","abs","round","window","addEventListener","varX","getTouchedWorldCoord","varY","y","squareChooseIndex","console","log","setColor","end","init"],"mappings":"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","file":"static/js/main.fe259e5d.chunk.js","sourcesContent":["import {\r\n  createAnimation,\r\n  createBatch,\r\n  createGameLoop,\r\n  createWhiteTexture,\r\n  TextureRegion,\r\n  loadTexture,\r\n  createStage,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  PlayMode,\r\n  loadAtlas,\r\n  SpriteBatch,\r\n  TextureAtlas,\r\n  InputHandler\r\n} from 'gdxjs';\r\nimport { ViewportAwareInputHandler } from 'gdxjs/lib/createViewportAwareInputHandler';\r\n\r\nlet Compare = 0;\r\nlet accumulate = 0;\r\nlet z: number = 100;\r\nconst stage = createStage();\r\nlet index = 0;\r\nlet y: number = 100;\r\nlet x: number = 0;\r\nlet a: number;\r\n\r\nconst canvas = stage.getCanvas();\r\nexport const viewport = createViewport(canvas, 55, 100);\r\nexport const gl = viewport.getContext();\r\nexport const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\nexport const camera = viewport.getCamera();\r\nexport const batch = createBatch(gl);\r\nexport const whiteTex = createWhiteTexture(gl);\r\n\r\nlet backSmall = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nexport let storeCheckTouch: number[] = [];\r\nexport let oldValue: any[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet makeSmallItem = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nlet makeBigBack = 0;\r\nlet PosiCard: any = [\r\n  { x: 2, y: 25 },\r\n  { x: 17.6, y: 25 },\r\n  { x: 33.2, y: 25 },\r\n  { x: 2, y: 40.6 },\r\n  { x: 17.6, y: 40.6 },\r\n  { x: 33.2, y: 40.6 },\r\n  { x: 2, y: 56.2 },\r\n  { x: 17.6, y: 56.2 },\r\n  { x: 33.2, y: 56.2 },\r\n  { x: 2, y: 71.8 },\r\n  { x: 17.6, y: 71.8 },\r\n  { x: 33.2, y: 71.8 }\r\n];\r\nlet FrontBigger = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //last element check frontBig >1 or not\r\n\r\nlet touchItem = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100];\r\nlet touchItemFake = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet numberTouchItem = 0;\r\n\r\nexport let randomIndexArr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6];\r\n\r\nrandomIndexArr = randomIndexArr.sort(() => Math.random() - 0.5);\r\n\r\nexport function touchScale(\r\n  touchitem: number | undefined,\r\n  smallBack: number,\r\n  frontbig: number,\r\n  back: TextureRegion,\r\n  atlat: TextureAtlas,\r\n  randomIndexArr: number,\r\n  coorX: number,\r\n  coorY: number\r\n) {\r\n  if (touchitem == 0) {\r\n    back.draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n  } else if (touchitem == 1) {\r\n    if (smallBack > 0.01 && Compare == 0) {\r\n      back.draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, smallBack, 1);\r\n    } else if (smallBack < 0.01) {\r\n      if (frontbig < 1 && Compare == 0) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr)\r\n          .draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, frontbig, 1);\r\n      } else if (frontbig > 1 && Compare == 0) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr)\r\n          .draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction checkNumberTouchItem() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (touchItem[i] == 1 && i != x) {\r\n      numberTouchItem += 1;\r\n    }\r\n  }\r\n  return numberTouchItem;\r\n}\r\nexport function touch(inputHandler: ViewportAwareInputHandler) {\r\n  if (inputHandler.isTouched()) {\r\n    const targetX = inputHandler.getTouchedWorldCoord().x;\r\n    const targetY = inputHandler.getTouchedWorldCoord().y;\r\n\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[0] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[0] = 1;\r\n      touchItemFake[0] = 1;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[1] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[1] = 1;\r\n      touchItemFake[1] = 2;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[2] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[2] = 1;\r\n      touchItemFake[2] = 3;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[3] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[3] = 1;\r\n      touchItemFake[3] = 4;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[4] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[4] = 1;\r\n      touchItemFake[4] = 5;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[5] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[5] = 1;\r\n      touchItemFake[5] = 6;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[6] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[6] = 1;\r\n      touchItemFake[6] = 7;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[7] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[7] = 1;\r\n      touchItemFake[7] = 8;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[8] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[8] = 1;\r\n      touchItemFake[8] = 9;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[9] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[9] = 1;\r\n      touchItemFake[9] = 10;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[10] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[10] = 1;\r\n      touchItemFake[10] = 11;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[11] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[11] = 1;\r\n      touchItemFake[11] = 12;\r\n    }\r\n  }\r\n}\r\n\r\nexport function backsmaller(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  for (let i = 0; i < backSmall.length; i++) {\r\n    if (i == item) {\r\n      break;\r\n    }\r\n  }\r\n  if (touchitem == 1) {\r\n    return (backSmall[item] -= 8 * delta);\r\n  } else {\r\n    return backSmall[item];\r\n  }\r\n}\r\nexport function frontbiger(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  for (let i = 0; i < FrontBigger.length; i++) {\r\n    if (i == item) {\r\n      break;\r\n    }\r\n  }\r\n  if (touchitem == 1) {\r\n    return (FrontBigger[item] += 8 * delta);\r\n  } else {\r\n    return FrontBigger[item];\r\n  }\r\n}\r\nexport function touchitem(item: number) {\r\n  for (const [key, value] of Object.entries(touchItem)) {\r\n    if (key == item.toString()) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n//check\r\nexport function push_IndexOf_RandomIndexArrToCompare() {\r\n  //  rs touchItem 12,13,14\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y == 100) {\r\n      x = touchItemFake[i] - 1;\r\n      y = 1;\r\n    }\r\n  }\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y != 100 && touchItemFake[i] - 1 != x) {\r\n      z = touchItemFake[i] - 1;\r\n    }\r\n  }\r\n  console.log(numberTouchItem);\r\n}\r\n\r\nexport function checkLastEle_FrontBig() {\r\n  // reset FrontBigger[12] = 0, FrontBigger[13] = 0,index =100\r\n  for (let i = 0; i < 12; i++) {\r\n    if (FrontBigger[i] > 1) {\r\n      if (FrontBigger[12] < 1) {\r\n        FrontBigger[12] += FrontBigger[i];\r\n        index = FrontBigger.indexOf(FrontBigger[i]);\r\n      }\r\n      if (FrontBigger[13] < 1 && FrontBigger.indexOf(FrontBigger[i]) != index) {\r\n        FrontBigger[13] += FrontBigger[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n//frontBig,toa do xy,\r\nexport function checkCardPosi() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (x == i) {\r\n      PosiCard[12] = i;\r\n    }\r\n    if (z == i && i != x) {\r\n      PosiCard[13] = i;\r\n    }\r\n  }\r\n}\r\nexport function compare(\r\n  delta: number,\r\n  atlat: TextureAtlas,\r\n  back: TextureRegion\r\n) {\r\n  if (FrontBigger[12] > 1 && FrontBigger[13] > 1) {\r\n    Compare = 1;\r\n\r\n    if (randomIndexArr[x] != randomIndexArr[z]) {\r\n      accumulate += delta;\r\n      if (accumulate < 0.5) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(batch, PosiCard[x].x, PosiCard[x].y, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(batch, PosiCard[z].x, PosiCard[z].y, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n      }\r\n      if (\r\n        makeSmallItem[x] > 0.01 &&\r\n        makeSmallItem[z] > 0.02 &&\r\n        accumulate > 0.5\r\n      ) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 8 * delta),\r\n            1\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 8 * delta),\r\n            1\r\n          );\r\n      }\r\n\r\n      if (makeSmallItem[x] < 0.01 && makeBigBack < 1) {\r\n        back.draw(\r\n          batch,\r\n          PosiCard[x].x,\r\n          PosiCard[x].y,\r\n          13.6,\r\n          13.6,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 8 * delta),\r\n          1\r\n        );\r\n\r\n        back.draw(\r\n          batch,\r\n          PosiCard[z].x,\r\n          PosiCard[z].y,\r\n          13.6,\r\n          13.6,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 8 * delta),\r\n          1\r\n        );\r\n      }\r\n      if (makeBigBack > 1) {\r\n        back.draw(\r\n          batch,\r\n          PosiCard[x].x,\r\n          PosiCard[x].y,\r\n          13.6,\r\n          13.6,\r\n          5,\r\n          5,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n\r\n        back.draw(\r\n          batch,\r\n          PosiCard[z].x,\r\n          PosiCard[z].y,\r\n          13.6,\r\n          13.6,\r\n          5,\r\n          5,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n        makeBigBack = 0;\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n        FrontBigger[x] = 0;\r\n        FrontBigger[z] = 0;\r\n        Compare = 0;\r\n        accumulate = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    } else {\r\n      if (makeSmallItem[x] > 0.02 && makeSmallItem[z] > 0.02) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        oldValue[x] = 1;\r\n        oldValue[z] = 1;\r\n      }\r\n      if (makeSmallItem[x] < 0.02) {\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n\r\n        FrontBigger[x] = 0;\r\n        FrontBigger[z] = 0;\r\n\r\n        Compare = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import './index.css';\nimport {\n  createAnimation,\n  createBatch,\n  createGameLoop,\n  createWhiteTexture,\n  TextureRegion,\n  loadTexture,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  PlayMode,\n  loadAtlas\n} from 'gdxjs';\nimport {\n  backsmaller,\n  frontbiger,\n  touchitem,\n  touch,\n  touchScale,\n  gl,\n  batch,\n  whiteTex,\n  inputHandler,\n  camera,\n  push_IndexOf_RandomIndexArrToCompare,\n  checkLastEle_FrontBig,\n  checkCardPosi,\n  compare,\n  storeCheckTouch,\n  randomIndexArr,\n  oldValue\n} from './touchScale';\nlet squareChoose = 1000;\n\nconst init = async () => {\n  // image.image();\n  // let scaleBack0 = 1;\n  // let scaleBack1 = 1;\n  // let scaleBackCompare =0 ;\n  // let scaleItem1 = 1.2;\n  // let scaleItem2 = 1.2\n  // let scaleCloth = 0;\n  // let scaleShoe = 0;\n  // let Compare = 0;\n\n  let accumulate = 0;\n  let stop0 = 0;\n  let stopY1 = 0;\n  let stopY2 = 0;\n  let squareChooseAssigend: boolean = false;\n  let canSwapSquare: { value: number; coorX: number; coorY: number }[];\n  let count = 0;\n  let startSwap = 0;\n\n  let squareInfo: { value: number; coorX: number; coorY: number }[] = [\n    {\n      value: 100,\n      coorX: 4.5,\n      coorY: 19\n    },\n    {\n      value: 0,\n      coorX: 4.5,\n      coorY: 33\n    },\n    {\n      value: 1,\n      coorX: 18.5,\n      coorY: 33\n    },\n    {\n      value: 2,\n      coorX: 32.5,\n      coorY: 33\n    },\n    {\n      value: 3,\n      coorX: 4.5,\n      coorY: 47\n    },\n    {\n      value: 4,\n      coorX: 18.5,\n      coorY: 47\n    },\n    {\n      value: 5,\n      coorX: 32.5,\n      coorY: 47\n    },\n    {\n      value: 6,\n      coorX: 4.5,\n      coorY: 61\n    },\n    {\n      value: 7,\n      coorX: 18.5,\n      coorY: 61\n    },\n    {\n      value: 8,\n      coorX: 32.5,\n      coorY: 61\n    }\n  ];\n  let randomIndexArr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  randomIndexArr = randomIndexArr.sort(() => Math.random() - 0.5);\n  for (let i = 1; i < squareInfo.length; i++) {\n    squareInfo[i].value = randomIndexArr[i - 1];\n  }\n  let emptyIndex: number;\n  let squareChooseIndex: number;\n\n  const bgImg = await loadTexture(gl, './dating-bg.jpg');\n  const mainImgs = await loadTexture(gl, './tingme.jpg');\n  const lineDoc = await loadTexture(gl, './doc.png');\n  const lineNgang = await loadTexture(gl, './ngang.png');\n\n  const regions = TextureRegion.splitTexture(mainImgs, 3, 3);\n\n  gl.clearColor(1, 0.6, 0.6, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(whiteTex, 0, 0, 50, 100);\n    batch.draw(bgImg, 0, 0, 50, 100);\n\n    emptyIndex = squareInfo.findIndex(x => x.value === 100); //ok\n    //draw square\n\n    //square co the swap\n    canSwapSquare = squareInfo.filter(\n      square =>\n        (square.value != 100 &&\n          square.coorY == squareInfo[emptyIndex].coorY &&\n          Math.abs(square.coorX - squareInfo[emptyIndex].coorX) == 14) ||\n        (square.value != 100 &&\n          square.coorX == squareInfo[emptyIndex].coorX &&\n          Math.abs(Math.round(square.coorY) - squareInfo[emptyIndex].coorY) ==\n            14)\n    );\n\n    window.addEventListener('mousedown', function () {\n      let varX = inputHandler.getTouchedWorldCoord().x;\n      let varY = inputHandler.getTouchedWorldCoord().y;\n      for (let square of canSwapSquare) {\n        if (\n          varX > square.coorX &&\n          varX < square.coorX + 13 &&\n          varY > square.coorY &&\n          varY < square.coorY + 13 &&\n          square.value != 100\n        ) {\n          squareChoose = square.value;\n          squareChooseIndex = squareInfo.findIndex(\n            x => x.value === squareChoose\n          ); //ok\n\n          startSwap = 1;\n        }\n      }\n    });\n\n    window.addEventListener('touchstart', function () {\n      let varX = inputHandler.getTouchedWorldCoord().x;\n      let varY = inputHandler.getTouchedWorldCoord().y;\n      for (let square of canSwapSquare) {\n        if (\n          varX > square.coorX &&\n          varX < square.coorX + 13 &&\n          varY > square.coorY &&\n          varY < square.coorY + 13 &&\n          square.value != 100\n        ) {\n          squareChoose = square.value;\n          squareChooseIndex = squareInfo.findIndex(\n            x => x.value === squareChoose\n          ); //ok\n\n          startSwap = 1;\n        }\n      }\n    });\n\n    for (let square of squareInfo) {\n      if (square.value != 100 && startSwap == 0) {\n        regions[square.value].draw(batch, square.coorX, square.coorY, 13, 13);\n      } else if (square.value != 100 && startSwap == 1) {\n        regions[square.value].draw(batch, square.coorX, square.coorY, 13, 13);\n        if (\n          squareInfo[emptyIndex].coorY == squareInfo[squareChooseIndex].coorY\n        ) {\n          if (\n            squareInfo[emptyIndex].coorX >\n              squareInfo[squareChooseIndex].coorX &&\n            squareChooseAssigend == false\n          ) {\n            regions[squareChoose].draw(\n              batch,\n              (squareInfo[squareChooseIndex].coorX += 20 * delta),\n              squareInfo[squareChooseIndex].coorY,\n              13,\n              13\n            );\n            if (\n              squareInfo[emptyIndex].coorX < squareInfo[squareChooseIndex].coorX\n            ) {\n              regions[squareChoose].draw(\n                batch,\n                squareInfo[emptyIndex].coorX,\n                squareInfo[squareChooseIndex].coorY,\n                13,\n                13\n              );\n              squareInfo[squareChooseIndex].coorX =\n                squareInfo[emptyIndex].coorX;\n\n              squareInfo[emptyIndex].coorX = squareInfo[emptyIndex].coorX - 14;\n              squareChooseAssigend = true;\n            }\n          }\n\n          if (\n            squareInfo[emptyIndex].coorX <\n              squareInfo[squareChooseIndex].coorX &&\n            squareChooseAssigend == false\n          ) {\n            regions[squareChoose].draw(\n              batch,\n              (squareInfo[squareChooseIndex].coorX -= 20 * delta),\n              squareInfo[squareChooseIndex].coorY,\n              13,\n              13\n            );\n            if (\n              squareInfo[emptyIndex].coorX > squareInfo[squareChooseIndex].coorX\n            ) {\n              regions[squareChoose].draw(\n                batch,\n                squareInfo[emptyIndex].coorX,\n                squareInfo[squareChooseIndex].coorY,\n                13,\n                13\n              );\n              squareInfo[squareChooseIndex].coorX =\n                squareInfo[emptyIndex].coorX;\n\n              squareInfo[emptyIndex].coorX = squareInfo[emptyIndex].coorX + 14;\n              squareChooseAssigend = true;\n            }\n          }\n        }\n        //\n        if (\n          squareInfo[emptyIndex].coorX == squareInfo[squareChooseIndex].coorX\n        ) {\n          if (\n            squareInfo[emptyIndex].coorY >\n              squareInfo[squareChooseIndex].coorY &&\n            squareChooseAssigend == false\n          ) {\n            regions[squareChoose].draw(\n              batch,\n              squareInfo[squareChooseIndex].coorX,\n              (squareInfo[squareChooseIndex].coorY += 20 * delta),\n              13,\n              13\n            );\n            if (\n              squareInfo[emptyIndex].coorY < squareInfo[squareChooseIndex].coorY\n            ) {\n              regions[squareChoose].draw(\n                batch,\n                squareInfo[squareChooseIndex].coorX,\n                squareInfo[emptyIndex].coorY,\n                13,\n                13\n              );\n              squareInfo[squareChooseIndex].coorY =\n                squareInfo[emptyIndex].coorY;\n              console.log(squareInfo[squareChooseIndex].coorY);\n              squareInfo[emptyIndex].coorY = squareInfo[emptyIndex].coorY - 14;\n\n              squareChooseAssigend = true;\n            }\n          }\n\n          if (\n            squareInfo[emptyIndex].coorY <\n              squareInfo[squareChooseIndex].coorY &&\n            squareChooseAssigend == false\n          ) {\n            regions[squareChoose].draw(\n              batch,\n              squareInfo[squareChooseIndex].coorX,\n              (squareInfo[squareChooseIndex].coorY -= 20 * delta),\n              13,\n              13\n            );\n            if (\n              squareInfo[emptyIndex].coorY > squareInfo[squareChooseIndex].coorY\n            ) {\n              regions[squareChoose].draw(\n                batch,\n                squareInfo[squareChooseIndex].coorX,\n                squareInfo[emptyIndex].coorY,\n                13,\n                13\n              );\n              squareInfo[squareChooseIndex].coorY =\n                squareInfo[emptyIndex].coorY;\n              console.log(squareInfo[squareChooseIndex].coorY);\n              squareInfo[emptyIndex].coorY = squareInfo[emptyIndex].coorY + 14;\n\n              squareChooseAssigend = true;\n            }\n          }\n        }\n      }\n    }\n    batch.draw(lineDoc, 1.5, 18.5, 5, 56.5);\n    batch.draw(lineDoc, 44.5, 32.5, 3, 42.5);\n    batch.draw(lineDoc, 16.5, 18.5, 3, 14);\n\n    batch.draw(lineNgang, 4, 17, 14, 3);\n\n    batch.draw(lineNgang, 4, 73.5, 42, 3);\n    batch.draw(lineNgang, 18, 31, 28, 3);\n    // batch.draw(lineNgang, 0, 15, 10, 10);\n\n    if (squareChooseAssigend == true) {\n      squareChooseAssigend = false;\n      startSwap = 0;\n    }\n\n    console.log(squareInfo);\n    batch.setColor(0.4, 0.4, 0.4, 1);\n\n    batch.setColor(1, 1, 1, 1);\n\n    batch.end();\n  });\n};\n\ninit();\n"],"sourceRoot":""}